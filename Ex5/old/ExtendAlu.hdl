// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     And (a=instruction[7], b=instruction[8], out=IfRegularOut);

     ShiftLeft (in=x, out=xShiftedLeft);
     ShiftRight (in=x, out=xShiftedRight);
     ShiftLeft (in=y, out=yShiftedLeft);
     ShiftRight (in=y, out=yShiftedRight);

     // Configure the alternative output:
     Mux4Way16 (a=yShiftedRight, b=xShiftedRight, c=yShiftedLeft,
     d=xShiftedLeft, sel[0]=instruction[4], sel[1]=instruction[5],
     out=AlternativeOut, out[15]=SignBit, out[0..7]=Block1, out[8..15]=Block2);
     Or8Way (in=Block1, out=IsThereOne1);
     Or8Way (in=Block2, out=IsThereOne2);
     Or (a=IsThereOne1, b=IsThereOne2, out=Notzr);
     Not (in=Notzr, out=Alternativezr);
     And (a=SignBit, b=true, out=Alternativeng);

     // Compute a regular ALU output:
     ALU (x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3],
     ny=instruction[2], f=instruction[1], no=instruction[0], out=RegularOut,
     zr=Regularzr, ng=Regularng);

     // Choose output and out:
     Mux16 (a=AlternativeOut, b=RegularOut, sel=IfRegularOut, out=out);
     Mux (a=Alternativezr, b=Regularzr, sel=IfRegularOut, out=zr);
     Mux (a=Alternativeng, b=Regularng, sel=IfRegularOut, out=ng);
}
