// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // If instruction[15] == 0, then it is an A-Instruction, and so load the
    // A-Register with the instruction. Else, it is a C-Instruction, and so
    // load it with the result of computation from the ALU.
    And (a=instruction[15], b=instruction[5], out=CInstructionToA);
    Not (in=instruction[15], out=AInstruction);  // if A instruction.
    Or (a=CInstructionToA, b=AInstruction, out=ARegLoad); // compute load.
    Mux16 (a=instruction, b=ALUOut, sel=instruction[15], out=ARegIn);
    ARegister (in=ARegIn, load=ARegLoad, out=ARegOut,
    out[0..14]=addressM); // two outputs.

    // Write to the D-Register only if it is a C-Instruction
    // (instruction[15] == 1) and also the result of the computation must be
    // written into the D-Register (instruction[4] == 1).
    And (a=instruction[15], b=instruction[4], out=DRegLoad);
    DRegister (in=ALUOut, load=DRegLoad, out=DRegOut);

    // The ALU can either do operations with D and A or with D and M. Pass M if
    // it is a C-Instruction and the a-bit in the instruction (instruction[12])
    // is invoked.
    And (a=instruction[15], b=instruction[12], out=MLoad);
    Mux16 (a=ARegOut, b=inM, sel=MLoad, out=AorM);

    ALU (x=DRegOut, y=AorM, zx=instruction[11], nx=instruction[10],
    zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
    out=ALUOut, out=outM, zr=zr, ng=ng); // two main outputs.

    // Write to M only if instruction[3] == 1.
    And (a=instruction[15], b=instruction[3], out=writeM);

    // If instruction[0] || instruction[1] || instruction[2] == 1, pc =
    // = addressM. If they are zeroes, pc++.
    // Check if JGT:
    Not (in=ng, out=pos);
    Not (in=zr, out=nzr);
    And (a=pos, b=nzr, out=posAndnzr);
    And (a=instruction[0], b=posAndnzr, out=jgt);

    // Check if JEQ:
    And (a=instruction[1], b=zr, out=jeq);

    // Check if JGE:
    Or (a=pos, b=zr, out=posOrzr);
    And (a=instruction[0], b=instruction[1], out=Ifjge);
    And (a=Ifjge, b=posOrzr, out=jge);

    // Check if JLT:
    And (a=ng, b=nzr, out=ngAndnzr);
    And (a=instruction[2], b=ngAndnzr, out=jlt);

    // Check if JNE:
    And (a=instruction[0], b=instruction[2], out=Ifjne);
    And (a=Ifjne, b=nzr, out=jne);

    // Check if JLE:
    Or (a=ng, b=zr, out=ngOrzr);
    And (a=instruction[1], b=instruction[2], out=Ifjle);
    And (a=Ifjle, b=ngOrzr, out=jle);

    // Check if unconditional jump:
    And (a=instruction[0], b=instruction[1], out=Ifjmp);
    And (a=Ifjmp, b=instruction[2], out=jmp);

    // Check if there is a need to jump:
    Or8Way (in[0]=jgt, in[1]=jeq, in[2]=jge, in[3]=jlt, in[4]=jne, in[5]=jle,
    in[6]=jmp, in[7]=false, out=IfJump);

    // Set the PC:
    And (a=instruction[15], b=IfJump, out=PCLoad);
    Not (in=PCLoad, out=PCInc);
    PC (in=ARegOut, load=PCLoad, inc=PCInc, reset=reset, out[0..14]=pc);
}