// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method
 * calls.
 */
class Math {

    static Array twoToThe;
    static int doubleQMultipliedY;  // for division.

    /** Initializes the library. */
    function void init() {
        var int i, power;
        let twoToThe = Array.new(16);
        let i = 0;
        let power = 1;
        while (i < 16) {
            let twoToThe[i] = power;
            let power = power + power;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns true iff the i-th bit of x is 1. */
    function boolean bit(int x, int i) {
        return ~((x & twoToThe[i]) = 0);
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;  // multiply by two.
            let i = i + 1;
        }
        return sum;
    }

    /** Returns true iff x and y have the same sign (both negative, or both
     *  non-negative. */
    function boolean checkSameSign(int x, int y) {
        var boolean ifNegX, ifNegY;
        let ifNegX = x < 0;
        let ifNegY = y < 0;
        return (ifNegX = ifNegY);
    }

    /** Is a helper function for the divide function. */
    function int divideHelper(int x, int y) {
        var int q;
        if ((y < 0) | (y > x)) {
            return 0;
        }
        let q = Math.divideHelper(x, y + y);
        if ((x - doubleQMultipliedY) < y) {
            return (q + q);
        }
        let doubleQMultipliedY = doubleQMultipliedY + y;
        return (q + q + 1);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result;
        let doubleQMultipliedY = 0;
        let result = Math.divideHelper(Math.abs(x), Math.abs(y));
        if (Math.checkSameSign(x, y)) {
            return result;
        }
        return -result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		// This should be implemented without using division, but
		// multiplication is allowed.
		var int y, j, temp, tempSquared;
		let y = 0;
		let j = 7;
		while (~(j < 0)) {
		    let temp = y + twoToThe[j];
		    let tempSquared = Math.multiply(temp, temp);
		    if (~(tempSquared > x) & (tempSquared > 0)) {
		        let y = temp;
		    }
		    let j = j - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
