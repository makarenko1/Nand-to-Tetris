// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array twoToThe;
    static Array screen;
    static boolean color;

    /** Fills the twoToTheOutput array. */
    function void powersOfTwo() {
        var int i, power;
        let twoToThe = Array.new(16);
        let i = 0;
        let power = 1;
        while (i < 16) {
            let twoToThe[i] = power;
            let power = power + power;
            let i = i + 1;
        }
        return;
    }

    /** Initializes the Screen. */
    function void init() {
        do Screen.powersOfTwo();
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		// For this function, you will need to calculate the value x%16.
		// It should be calculated quickly without using multiplication or
		// division, using exactly one basic math/logical operation.
		// In addition, calculating 16384 + y * 32 + x/16 should not use
		// division or multiplication.
		var int temp1, temp2, i, address, mask;
		let temp1 = y;
		let i = 0;
		while (i < 5) {
		    let temp1 = ^temp1;
		    let i = i + 1;
		}
		let temp2 = x;
		let i = 0;
		while (i < 4) {
		    let temp2 = #temp2;
		    let i = i + 1;
		}
		let address = temp1 + temp2;
		let mask = twoToThe[(x & 15)];
		if (color) {
		    let screen[address] = screen[address] | mask;
		}
		else {
		    let screen[address] = screen[address] & ~mask;
		}
		return;
    }

    /** Draws a vertical line from pixel (x,y1) to pixel (x,y2), using the
     * current color. */
    function void drawVerticalLine(int x, int y1, int y2) {
        var int i;
        let i = y1;
        while(~(i > y2)) {
            do Screen.drawPixel(x, i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a horizontal line from pixel (x1,y) to pixel (x2,y), using the
     * current color. */
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int i;
        let i = x1;
        while(~(i > x2)) {
            do Screen.drawPixel(i, y);
            let i = i + 1;
        }
        return;
    }

    /** Draws a right-diagonal line, using the current color. */
    function void drawRightDiagonalLine(int x, int y, int dx, int dy) {
        var int a, b, diff;
        let a = 0;
		let b = 0;
		let diff = 0;
		while (~(a > dx) & ~(b > dy)) {
		    do Screen.drawPixel(x + a, y + b);
		    if (diff < 0) {
		        let a = a + 1;
		        let diff = diff + dy;
		    }
		    else {
		        let b = b + 1;
		        let diff = diff - dx;
		    }
		}
		return;
    }

    /** Draws a left-diagonal line, using the current color. */
    function void drawLeftDiagonalLine(int x, int y, int dx, int dy) {
        var int a, b, diff;
        let a = 0;
		let b = 0;
		let diff = 0;
		while (~(a > dx) & ~(b < dy)) {
		    do Screen.drawPixel(x + a, y + b);
		    if (diff < 0) {
		        let b = b - 1;
		        let diff = diff + dx;
		    }
		    else {
		        let a = a + 1;
		        let diff = diff + dy;
		    }
		}
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current
     * color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		// The case where x1 != x2 and y1 != y2 should be implemented without
		// multiplication or division.
		// Also, the case where y1 == y2 can be implemented efficiently by
		// trying to draw as many pixels as possible in a single assignment,
		// similarly to Fill in project 4.
		var int xMin, xMax, yMin, yMax;
		if (x1 = x2) {
		    let yMin = Math.min(y1, y2);
		    let yMax = Math.max(y1, y2);
		    do Screen.drawVerticalLine(x1, yMin, yMax);
		    return;
		}
		if (y1 = y2) {
		    let xMin = Math.min(x1, x2);
		    let xMax = Math.max(x1, x2);
		    do Screen.drawHorizontalLine(xMin, xMax, y1);
		    return;
		}
		if ((x1 < x2) & (y1 < y2)) {
		    do Screen.drawRightDiagonalLine(x1, y1, x2 - x1, y2 - y1);
		    return;
		}
		if ((x2 < x1) & (y2 < y1)) {
		    do Screen.drawRightDiagonalLine(x2, y2, x1 - x2, y1 - y2);
		    return;
		}
        if ((x1 < x2) & (y2 < y1)) {
            do Screen.drawLeftDiagonalLine(x1, y1, x2 - x1, y2 - y1);
            return;
        }
        do Screen.drawLeftDiagonalLine(x2, y2, x1 - x2, y1 - y2);
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;
        let i = y1;
        while (~(i > y2)) {
            do Screen.drawHorizontalLine(x1, x2, i);  // draw a horizontal line.
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current
     * color. */
    function void drawCircle(int x, int y, int r) {
        var int i, w, h;
        let i = -r;
        while (~(i > r)) {
            let w = Math.sqrt((r * r) - (i * i));
            let h = y + i;
            do Screen.drawLine((x - w), h, (x + w), h);
            let i = i + 1;
        }
        return;
    }
}
